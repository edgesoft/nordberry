// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  clerkUserId String?    @unique // @unique skapar automatiskt ett index
  email       String     @unique // @unique skapar automatiskt ett index
  name        String?
  imageUrl    String?
  status      UserStatus @default(invited)
  role        UserRole   @default(executor)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations - onDelete styrs från de relaterade modellerna nedan
  chains      Chain[]    @relation("ChainOwner")
  taskUsers   TaskUser[]
  comments    Comment[]
  files       File[]

  // Index för att snabbt hitta användare baserat på status eller roll om det behövs
  @@index([status])
  @@index([role])
}

enum UserStatus {
  invited
  active
  deactivated
  pending_approval
}

enum UserRole {
  admin
  executor
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Överväg index om du ofta filtrerar på detta

  // Relations
  chains      Chain[]

  @@index([deletedAt]) // Om du ofta hämtar icke-raderade projekt
}

model Chain {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  ownerId     String
  owner       User      @relation("ChainOwner", fields: [ownerId], references: [id], onDelete: Restrict)

  tasks       Task[]

  // Index för främmande nycklar och ev. filtrering/sortering
  @@index([projectId])
  @@index([ownerId])
  @@index([deletedAt]) // Om du ofta hämtar icke-raderade kedjor
  @@index([createdAt]) // Om du ofta sorterar kedjor efter datum
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String?
  sortOrder     Int?
  status        TaskStatus @default(pending)

  chainId       String
  chain         Chain      @relation(fields: [chainId], references: [id], onDelete: Cascade)

  assignments   TaskUser[]
  comments      Comment[]

  dependencies  Task[]     @relation("TaskDependencies")
  dependedOnBy  Task[]     @relation("TaskDependencies")

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime? // Överväg index om du ofta filtrerar

  // Index för främmande nyckel, status, sortering och datum
  @@index([chainId])
  @@index([status])
  @@index([deletedAt]) // Om du ofta hämtar icke-raderade tasks
  @@index([createdAt]) // Om du ofta sorterar tasks efter datum
  // Compound index för att hämta tasks i en kedja och sortera dem effektivt
  @@index([chainId, sortOrder])
}

model TaskUser {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  role      TaskRole
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  // @@unique skapar redan ett effektivt index för att hitta en specifik koppling
  // och förhindrar dubbletter.
  @@unique([taskId, userId])
  // Separata index kan vara bra om du ofta söker alla tasks för en user, eller alla users för en task
  @@index([userId])
  @@index([taskId]) // Redan täckt av unique-indexet, men skadar inte att vara explicit
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  deletedAt DateTime? // Fält för mjuk radering
  editedAt DateTime?
  taskId    String
  userId    String

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  files     File[]

  // Index för främmande nycklar, soft delete och sortering
  @@index([taskId])
  @@index([userId])
  @@index([deletedAt]) // MYCKET VIKTIGT för att snabbt hitta icke-raderade
  @@index([createdAt]) // För sortering
  // Compound index för att snabbt hämta icke-raderade kommentarer för en task, sorterat
  @@index([taskId, deletedAt, createdAt])
}

model File {
  id        String     @id @default(cuid())
  url       String
  name      String
  createdAt DateTime   @default(now())
  commentId String
  userId    String
  source    FileSource @default(S3)

  comment   Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Index för främmande nycklar
  @@index([commentId])
  @@index([userId])
  @@index([createdAt]) // Om du sorterar filer efter datum
}

// --- Enums oförändrade ---
enum TaskRole {
  worker
  approver
  viewer
}
enum TaskStatus {
  pending
  working
  done
}
enum FileSource {
  S3
  SHAREPOINT
}