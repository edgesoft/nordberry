// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  clerkUserId String?    @unique
  email       String     @unique
  name        String?
  imageUrl    String?
  status      UserStatus @default(invited)
  role        UserRole   @default(executor)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations - onDelete styrs från de relaterade modellerna nedan
  chains      Chain[]    @relation("ChainOwner")
  taskUsers   TaskUser[]
  comments    Comment[]
  files       File[]
}

enum UserStatus {
  invited
  active
  deactivated
  pending_approval
}

enum UserRole {
  admin
  executor
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  // Om ett projekt tas bort, tas även dess kedjor bort.
  chains      Chain[]
}

model Chain {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  projectId   String
  // Om ett projekt tas bort, tas även denna kedja bort.
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  ownerId     String
  // Förhindra radering av User om de fortfarande äger en Chain.
  owner       User      @relation("ChainOwner", fields: [ownerId], references: [id], onDelete: Restrict)

  // Om en kedja tas bort, tas även dess Tasks bort.
  tasks       Task[]
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String?
  sortOrder     Int?
  status        TaskStatus @default(pending)

  chainId       String
  // Om en kedja tas bort, tas även denna Task bort.
  chain         Chain      @relation(fields: [chainId], references: [id], onDelete: Cascade)

  // Om en Task tas bort, tas dess assignments och comments bort (via cascade i TaskUser/Comment).
  assignments   TaskUser[]
  comments      Comment[]

  // Self-referencing many-to-many dependency (utan explicit pivot)
  // Standard onDelete här är oftast Restrict/NoAction, vilket är säkrast
  // för att undvika oavsiktliga massraderingar via beroenden.
  dependencies  Task[]     @relation("TaskDependencies")
  dependedOnBy  Task[]     @relation("TaskDependencies")

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
}

model TaskUser {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  role      TaskRole
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Om en Task tas bort, tas denna TaskUser-koppling bort.
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  // Förhindra radering av User om de fortfarande har en TaskUser-koppling.
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@unique([taskId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  taskId    String
  userId    String

  // Om en Task tas bort, tas denna kommentar bort.
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  // Förhindra radering av User om de fortfarande har skrivit denna kommentar.
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Om en kommentar tas bort, tas dess filer bort.
  files     File[]
}

model File {
  id        String     @id @default(cuid())
  url       String
  name      String
  createdAt DateTime   @default(now())
  commentId String
  userId    String
  source    FileSource @default(S3)

  // Om en kommentar tas bort, tas denna fil bort.
  comment   Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  // Förhindra radering av User om de fortfarande äger denna fil.
  user      User       @relation(fields: [userId], references: [id], onDelete: Restrict)
}

enum TaskRole {
  worker
  approver
  viewer
}

enum TaskStatus {
  pending
  working
  done
}

enum FileSource {
  S3
  SHAREPOINT
}